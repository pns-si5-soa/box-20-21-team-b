version: '3.8'

services:
  ## WEATHER INFO SERVICE
  weather:
    build: ./service-weather
    image: boxb/weather
    labels:
      - "traefik.http.routers.weather.rule=PathPrefix(`/weather`)"
    restart: unless-stopped
    container_name: weather
    environment:
      - PORT=3000
      - MISSION_HOST=mission
      - MISSION_PORT=3002
    volumes:
      - ./service-weather/src/:/app/src/ # FOR HOT RELOAD ONLY
    depends_on:
      - mongo
      - kafka
    expose:
      - 3000
    ports:
      - 3000:3000
    networks:
      - services
      - proxy

  ## COLLECT, STOCK & EXPOSE ALL TELEMETRICS
  telemetry:
    build: ./service-telemetry
    image: boxb/telemetry
    labels:
      - "traefik.http.routers.telemetry.rule=PathPrefix(`/telemetry`)"
    restart: unless-stopped
    container_name: telemetry
    environment:
      - PORT=3004
      - PROBE_HOST=metrics-probe # Todo : Change with proper service
      - PROBE_PORT=3013 # Todo : Change with proper service
      - STAGE_HOST=metrics-stage # Todo : Change with proper service
      - STAGE_PORT=3023 # Todo : Change with proper service
      - BOOSTER_HOST=metrics-booster # Todo : Change with proper service
      - BOOSTER_PORT=3033 # Todo : Change with proper service
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB=blue_origin
    volumes:
      - ./service-telemetry/src/:/app/src/ # FOR HOT RELOAD ONLY
    depends_on:
      - mongo
      - kafka
    expose:
      - 3004
    ports:
      - 3004:3004
    networks:
      - services
      - proxy
      - modules

  ## ROCKET HQ
  rocket:
    build: ./service-rocket
    image: boxb/rocket
    labels:
      - "traefik.http.routers.rocket.rule=PathPrefix(`/rocket`)"
    restart: unless-stopped
    container_name: rocket
    environment:
      - PORT=3001
      - SOCKET_PORT=30011
      - MISSION_HOST=mission
      - MISSION_PORT=3002
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB=blue_origin
      - PROBE_HOST=actions-probe # Todo : Change with proper service
      - PROBE_PORT=3015 # Todo : Change with proper service
      - STAGE_HOST=actions-stage # Todo : Change with proper service
      - STAGE_PORT=3025 # Todo : Change with proper service
      - BOOSTER_HOST=actions-booster # Todo : Change with proper service
      - BOOSTER_PORT=3035 # Todo : Change with proper service
    volumes:
      - ./service-rocket/src/:/app/src/ # FOR HOT RELOAD ONLY
    depends_on:
      - mongo
      - kafka
    expose:
      - 3001
    ports:
      - 3001:3001
    networks:
      - services
      - proxy
      - modules

  ## SEND POOLS & START MISSION
  mission:
    build: ./service-mission
    image: boxb/mission
    labels:
      - "traefik.http.routers.mission.rule=PathPrefix(`/mission`)"
    container_name: mission
    restart: unless-stopped
    environment:
      - PORT=3002
      - ROCKET_HOST=rocket
      - ROCKET_PORT=3001
      - WEATHER_HOST=weather
      - WEATHER_PORT=3000
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB=blue_origin
    volumes:
      - ./service-mission/src/:/app/src/ # FOR HOT RELOAD ONLY
    depends_on:
      - mongo
      - kafka
    expose:
      - 3002
    ports:
      - 3002:3002
    networks:
      - services
      - proxy

  ## DATABASE FOR TELEMETRY, POLLS & ACTIONS HISTORY (WIP)
  mongo:
    image: mongo:latest
    container_name: boxb-mongo
    restart: unless-stopped
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: toor
      - MONGODB_DATABASE="blue_origin"
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - services

  ## PROMETHEUS SERVER FOR RETREIVING DATA FROM ROCKET MODULES
  prometheus:
    image: prom/prometheus:latest
    container_name: boxb-prometheus
    restart: unless-stopped
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./alertmanager/alert.rules/alerts.rules.yml:/alertmanager/alert.rules/alerts.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
    ports:
      - 9090:9090
    networks:
      - services

  ## ALERTMANAGER FOR PROMETHEUS
  # alertmanager:
    # image: prom/alertmanager:latest
    # container_name: alertmanager
    # deploy:
      # replicas: 1
    # volumes:
      # - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      # - ./alertmanager/templates/default.tmpl:/etc/alertmanager/templates/default.tmpl
    # command:
      # - '--config.file=/etc/alertmanager/alertmanager.yml'

  ## REVERSE PROXY
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.3
    container_name: boxb-traefik
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    depends_on:
      - rocket
      - mission
      - weather
      - telemetry
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - proxy

  ## MODULES
  module-actions:
    build: ./service-module-actions
    image: boxb/module-actions
    restart: unless-stopped
    #        container_name: module-actions-booster
    environment:
      - PORT=4000
      - ID_MODULE=1
    volumes:
      - ./event-mock.json:/etc/event-mock.json # FOR EVENT MODULE STATUS ONLY
      - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOG MODULE STATUS ONLY
    expose:
      - "4000"
    ports:
      - 4000:4000
    networks:
      - modules

  module-metrics:
    build: ./service-module-metrics
    image: boxb/module-metrics
    restart: unless-stopped
    #        container_name: module-actions-booster
    environment:
      - PORT=4001
      - ID_MODULE=1
    volumes:
      - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOG MODULE STATUS ONLY
    expose:
      - "4001"
    ports:
      - 4001:4001
    networks:
      - modules

  module-events:
    build: ./service-module-events
    image: boxb/module-events
    restart: unless-stopped
    #        container_name: module-actions-booster
    environment:
      - PORT=4002
      - ID_MODULE=1
    volumes:
      - ./event-mock.json:/etc/event-mock.json # FOR EVENT MODULE STATUS ONLY
    expose:
      - "4002"
    ports:
      - 4002:4002
    networks:
      - modules

      #  metrics-probe:
      #    build: ./service-module-metrics
      #    image: boxb/module-metrics
      #    restart: unless-stopped
      #    container_name: module-metrics-probe
      #    environment:
      #      - PORT=3013
      ##      - MONGO_HOST=mongo
      ##      - MONGO_PORT=27017
      ##      - MONGO_DB=blue_origin
      #    volumes:
      #    - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOGIQUE MODULE STATUS ONLY
      #    depends_on:
      #      - mongo
      #    expose:
      #      - "3013"
      #    ports:
      #      - 3013:3013
      #    networks:
      #      - modules
      #
      #  metrics-stage:
      #      build: ./service-module-metrics
      #      image: boxb/module-metrics
      #      restart: unless-stopped
      #      container_name: module-metrics-stage
      #      environment:
      #        - PORT=3023
      #  #      - MONGO_HOST=mongo
      #  #      - MONGO_PORT=27017
      #  #      - MONGO_DB=blue_origin
      #      volumes:
      #      - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOGIQUE MODULE STATUS ONLY
      #      depends_on:
      #        - mongo
      #      expose:
      #        - "3023"
      #      ports:
      #        - 3023:3023
      #      networks:
      #        - modules
      #
      #  metrics-booster:
      #      build: ./service-module-metrics
      #      image: boxb/module-metrics
      #      restart: unless-stopped
      #      container_name: module-metrics-booster
      #      environment:
      #        - PORT=3033
      #  #      - MONGO_HOST=mongo
      #  #      - MONGO_PORT=27017
      #  #      - MONGO_DB=blue_origin
      #      volumes:
      #      - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOGIQUE MODULE STATUS ONLY
      #      depends_on:
      #        - mongo
      #      expose:
      #        - "3033"
      #      ports:
      #        - 3033:3033
      #      networks:
      #        - modules
      #
      #  actions-probe:
      #    build: ./service-module-actions
      #    image: boxb/module-actions
      #    restart: unless-stopped
      #    container_name: module-actions-probe
      #    environment:
      #      - PORT=3015
      ##      - MONGO_HOST=mongo
      ##      - MONGO_PORT=27017
      ##      - MONGO_DB=blue_origin
      #    volumes:
      #      - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOGIQUE MODULE STATUS ONLY
      #    depends_on:
      #      - mongo
      #    expose:
      #      - "3015"
      #    ports:
      #      - 3015:3015
      #    networks:
      #      - modules
      #
      #  actions-stage:
      #      build: ./service-module-actions
      #      image: boxb/module-actions
      #      restart: unless-stopped
      #      container_name: module-actions-stage
      #      environment:
      #        - PORT=3025
      #  #      - MONGO_HOST=mongo
      #  #      - MONGO_PORT=27017
      #  #      - MONGO_DB=blue_origin
      #      volumes:
      #        - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOGIQUE MODULE STATUS ONLY
      #      depends_on:
      #        - mongo
      #      expose:
      #        - "3025"
      #      ports:
      #        - 3025:3025
      #      networks:
      #        - modules
      #
      #  actions-booster:
      #      build: ./service-module-actions
      #      image: boxb/module-actions
      #      restart: unless-stopped
      #      container_name: module-actions-booster
      #      environment:
      #        - PORT=3035
      #  #      - MONGO_HOST=mongo
      #  #      - MONGO_PORT=27017
      #  #      - MONGO_DB=blue_origin
      #      volumes:
      #        - ./analog-mock.json:/etc/analog-mock.json # FOR ANALOGIQUE MODULE STATUS ONLY
      #      depends_on:
      #        - mongo
      #      expose:
      #        - "3035"
      #      ports:
      #        - 3035:3035
      #      networks:
      #        - modules

  zookeeper:
    container_name: boxb-zookeeper
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    environment:
      zk_id: "1"
    networks:
      - services
  kafka:
    container_name: boxb-kafka
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    expose:
      - 9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: boxb-zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: "topic-poll:1:1,topic-poll-response:1:1,topic-rocket-event:1:1,topic-launch-event:1:1,topic-launch-order:1:1"
    networks:
      - services

networks:
  services:
  proxy:
  modules:

volumes:
  prometheus-data: {}

