// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package actions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ModuleActionsClient is the client API for ModuleActions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleActionsClient interface {
	Boom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoomReply, error)
	Detach(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error)
	SetThrustersSpeed(ctx context.Context, in *Double, opts ...grpc.CallOption) (*SetThrustersSpeedReply, error)
	Ok(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkReply, error)
	ToggleRunning(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RunningReply, error)
	SetAltitudeToDetach(ctx context.Context, in *Double, opts ...grpc.CallOption) (*SetAltitudeToDetachReply, error)
}

type moduleActionsClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleActionsClient(cc grpc.ClientConnInterface) ModuleActionsClient {
	return &moduleActionsClient{cc}
}

func (c *moduleActionsClient) Boom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoomReply, error) {
	out := new(BoomReply)
	err := c.cc.Invoke(ctx, "/actions.ModuleActions/Boom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleActionsClient) Detach(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/actions.ModuleActions/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleActionsClient) SetThrustersSpeed(ctx context.Context, in *Double, opts ...grpc.CallOption) (*SetThrustersSpeedReply, error) {
	out := new(SetThrustersSpeedReply)
	err := c.cc.Invoke(ctx, "/actions.ModuleActions/SetThrustersSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleActionsClient) Ok(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkReply, error) {
	out := new(OkReply)
	err := c.cc.Invoke(ctx, "/actions.ModuleActions/Ok", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleActionsClient) ToggleRunning(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RunningReply, error) {
	out := new(RunningReply)
	err := c.cc.Invoke(ctx, "/actions.ModuleActions/ToggleRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleActionsClient) SetAltitudeToDetach(ctx context.Context, in *Double, opts ...grpc.CallOption) (*SetAltitudeToDetachReply, error) {
	out := new(SetAltitudeToDetachReply)
	err := c.cc.Invoke(ctx, "/actions.ModuleActions/SetAltitudeToDetach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleActionsServer is the server API for ModuleActions service.
// All implementations must embed UnimplementedModuleActionsServer
// for forward compatibility
type ModuleActionsServer interface {
	Boom(context.Context, *Empty) (*BoomReply, error)
	Detach(context.Context, *Empty) (*Boolean, error)
	SetThrustersSpeed(context.Context, *Double) (*SetThrustersSpeedReply, error)
	Ok(context.Context, *Empty) (*OkReply, error)
	ToggleRunning(context.Context, *Empty) (*RunningReply, error)
	SetAltitudeToDetach(context.Context, *Double) (*SetAltitudeToDetachReply, error)
	mustEmbedUnimplementedModuleActionsServer()
}

// UnimplementedModuleActionsServer must be embedded to have forward compatible implementations.
type UnimplementedModuleActionsServer struct {
}

func (UnimplementedModuleActionsServer) Boom(context.Context, *Empty) (*BoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Boom not implemented")
}
func (UnimplementedModuleActionsServer) Detach(context.Context, *Empty) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detach not implemented")
}
func (UnimplementedModuleActionsServer) SetThrustersSpeed(context.Context, *Double) (*SetThrustersSpeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetThrustersSpeed not implemented")
}
func (UnimplementedModuleActionsServer) Ok(context.Context, *Empty) (*OkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ok not implemented")
}
func (UnimplementedModuleActionsServer) ToggleRunning(context.Context, *Empty) (*RunningReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleRunning not implemented")
}
func (UnimplementedModuleActionsServer) SetAltitudeToDetach(context.Context, *Double) (*SetAltitudeToDetachReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAltitudeToDetach not implemented")
}
func (UnimplementedModuleActionsServer) mustEmbedUnimplementedModuleActionsServer() {}

// UnsafeModuleActionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleActionsServer will
// result in compilation errors.
type UnsafeModuleActionsServer interface {
	mustEmbedUnimplementedModuleActionsServer()
}

func RegisterModuleActionsServer(s *grpc.Server, srv ModuleActionsServer) {
	s.RegisterService(&_ModuleActions_serviceDesc, srv)
}

func _ModuleActions_Boom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleActionsServer).Boom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/actions.ModuleActions/Boom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleActionsServer).Boom(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleActions_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleActionsServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/actions.ModuleActions/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleActionsServer).Detach(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleActions_SetThrustersSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Double)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleActionsServer).SetThrustersSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/actions.ModuleActions/SetThrustersSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleActionsServer).SetThrustersSpeed(ctx, req.(*Double))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleActions_Ok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleActionsServer).Ok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/actions.ModuleActions/Ok",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleActionsServer).Ok(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleActions_ToggleRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleActionsServer).ToggleRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/actions.ModuleActions/ToggleRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleActionsServer).ToggleRunning(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleActions_SetAltitudeToDetach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Double)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleActionsServer).SetAltitudeToDetach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/actions.ModuleActions/SetAltitudeToDetach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleActionsServer).SetAltitudeToDetach(ctx, req.(*Double))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModuleActions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "actions.ModuleActions",
	HandlerType: (*ModuleActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Boom",
			Handler:    _ModuleActions_Boom_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _ModuleActions_Detach_Handler,
		},
		{
			MethodName: "SetThrustersSpeed",
			Handler:    _ModuleActions_SetThrustersSpeed_Handler,
		},
		{
			MethodName: "Ok",
			Handler:    _ModuleActions_Ok_Handler,
		},
		{
			MethodName: "ToggleRunning",
			Handler:    _ModuleActions_ToggleRunning_Handler,
		},
		{
			MethodName: "SetAltitudeToDetach",
			Handler:    _ModuleActions_SetAltitudeToDetach_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "actions/actions.proto",
}
